/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.util.ArrayList;

import org.junit.Test;
import static org.junit.Assert.*;

public class PlannerTest {
	public class PlannerWorldState implements WorldState {
		public int value = 0;

		@Override
		public Object clone() {
			PlannerWorldState pws = new PlannerWorldState();
			pws.value = this.value;
			return pws;
		}
	}

	public abstract class PlannerBehavior implements Behavior<PlannerWorldState> {

	}

	public class PlannerBehaviorA extends PlannerBehavior {
		@Override
		public void modifyState(PlannerWorldState pws) {
			pws.value++;
		}

		@Override
		public boolean isRunnable() {
			return true;
		}
	}

	public class PlannerBehaviorB extends PlannerBehavior {
		@Override
		public void modifyState(PlannerWorldState pws) {
			pws.value--;
		}

		@Override
		public boolean isRunnable() {
			return true;
		}
	}

	public class PlannerGoal implements Goal<PlannerWorldState> {
		@Override
		public boolean isSatisfied(PlannerWorldState pws) {
			if (pws.value >= 10) return true;
			return false;
		}

		@Override
		public int compare(PlannerWorldState a, PlannerWorldState b) {
			if (a.value < b.value) return -1;
			if (a.value > b.value) return 1;
			return 0;
		}
	}

	public class PlannerBehaviorProvider implements BehaviorProvider<PlannerBehavior> {
		protected ArrayList<PlannerBehavior> behaviors;

		public PlannerBehaviorProvider() {
			this.behaviors = new ArrayList<PlannerBehavior>();
			this.behaviors.add(new PlannerBehaviorB());
			this.behaviors.add(new PlannerBehaviorA());
		}

		public java.util.Iterator<PlannerBehavior> iterator() {
			return behaviors.iterator();
		}
	}

	@Test
	public void testInitialStateCreation() {
		PlannerWorldState ws = new PlannerWorldState();
		PlannerGoal pg = new PlannerGoal();
		PlannerBehaviorProvider pbp = new PlannerBehaviorProvider();

		Planner<PlannerWorldState, PlannerGoal, PlannerBehavior, PlannerBehaviorProvider> p = new Planner<>();
		Planner<PlannerWorldState, PlannerGoal, PlannerBehavior, PlannerBehaviorProvider>.State ps = p.startPlanning(ws, pg, pbp);
		assertTrue("Initial planner should have the same world state as when created.", ps.getWorldState().equals(ws));
		assertTrue("Initial planner should have the same goal as when created.", ps.getGoal().equals(pg));
		assertEquals("Should have one state in the open set initially", 1, ps.getOpenSetSize());
		assertEquals("Should have no states in the closed set initially", 0, ps.getClosedSetSize());
		PlannerWorldState ws2 = ps.getHighestPriority();
		assertNotNull("Highest priority cannot be null directly after creation.", ws2);
		assertEquals("Highest priorty should be the same as we passed in, not just .equals", ws, ws2);
    }

    @Test
    public void testSingleStep() {
		PlannerWorldState ws = new PlannerWorldState();
		PlannerGoal pg = new PlannerGoal();
		PlannerBehaviorProvider pbp = new PlannerBehaviorProvider();

		Planner<PlannerWorldState, PlannerGoal, PlannerBehavior, PlannerBehaviorProvider> p = new Planner<>();
		Planner<PlannerWorldState, PlannerGoal, PlannerBehavior, PlannerBehaviorProvider>.State ps = p.startPlanning(ws, pg, pbp);
		boolean didStep = p.stepState(ps);
		assertTrue(".step() should succeed!", didStep);

		assertFalse("Planner after a step should have a different world state than when created.", ps.getWorldState().equals(ws));
		assertEquals("We should have two open states because we did not finish our initial state.", 2, ps.getOpenSetSize());
		assertEquals("Should have no states in the closed set after a run", 0, ps.getClosedSetSize());
		assertNotEquals("We should be looking at a new state now.", ps.getWorldState(), ws);

    }
}
