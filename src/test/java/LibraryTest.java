package com.gracefulcode.ai;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'dgrace' at '2/11/18 1:10 AM' with Gradle 2.10
 *
 * @author dgrace, @date 2/11/18 1:10 AM
 */
public class LibraryTest {
	private class MockGoal implements Goal {
		@Override
		public String getName() {
			return "Mock";
		}

		@Override
		public boolean isSatisfied(WorldState state) {
			return false;
		}

		@Override
		public int distance(WorldState state) {
			return 1;
		}
	}

	private class MockBehavior<T> implements Behavior<T> {
		private String _name;
		private WorldState _ifRan;
		private boolean _canRun;
		private int _cost;

		public MockBehavior(String name, WorldState ifRan, boolean canRun, int cost) {
			this._name = name;
			this._ifRan = ifRan;
			this._canRun = canRun;
			this._cost = cost;
		}

		@Override
		public String getName() {
			return this._name;
		}

		@Override
		public WorldState ifRan(WorldState state, T entity) {
			return this._ifRan;
		}

		@Override
		public boolean canRun(WorldState state, T entity) {
			return this._canRun;
		}

		@Override
		public int getCost(T entity) {
			return this._cost;
		}
	}

	private class MockBehaviorProvider<T> implements BehaviorProvider<T> {
		@Override
		public ArrayList<Behavior<T>> getBehaviors(T entity) {
			ArrayList<Behavior<T>> tmp = new ArrayList<Behavior<T>>();
			tmp.add(new MockBehavior<T>("Mock", new MockWorldState(), false, 1));
			return tmp;
		}
	}

	private class MockWorldState implements WorldState {
		@Override
		public WorldState clone() {
			// This technically is bad.
			return this;
		}
	}

    @Test
    public void testConnectionGetCost() {
    	WorldState a = new MockWorldState();
    	WorldState b = new MockWorldState();
    	Object o = new Object();
    	Connection<Object> c = new Connection<Object>(a, b, new MockBehavior("", null, true, 10));

    	assertTrue("Connection should return the cost from its behavior.", c.getCost(o) == 10);
    }

    @Test
    public void testNoRunnableBehaviorsFails() {
    	Pathfinder p = new Pathfinder();
    	WorldState a = new MockWorldState();
    	MockGoal g = new MockGoal();
    	Object o = new Object();

    	MockBehaviorProvider behaviorProvider = new MockBehaviorProvider<Object>();

    	ArrayList<Behavior<Object>> outPath = new ArrayList<Behavior<Object>>();

    	p.searchConnectionPath(
    		a,
    		g,
    		o,
    		behaviorProvider,
    		outPath
    	);
    	assertTrue("If there are no actionable Behaviors, the out path should be empty.", outPath.size() == 0);
    }
}
